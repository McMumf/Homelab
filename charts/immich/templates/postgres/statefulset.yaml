apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: immich-postgres
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: immich-postgres
  replicas: 1
  selector:
    matchLabels:
      app: immich-postgres
  template:
    metadata:
      labels:
        app: immich-postgres
    spec:
      automountServiceAccountToken: false
      containers:
        - name: immich-postgres
          image: tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
              ephemeral-storage: 10Gi
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-postgres-secrets
                  key: DB_PASSWORD
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: immich-postgres-secrets
                  key: DB_USERNAME
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_DATABASE_NAME
            - name: POSTGRES_INITDB_ARGS
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_INIT_ARGS
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql
            - name: pg-config
              mountPath: /etc/postgresql.conf
              subPath: postgresql.conf
      volumes:
        - name: pg-config
          configMap:
            name: immich-postgres-config
  volumeClaimTemplates:
    - metadata:
        name: pgdata
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi # Adjust size based on your requirements
